!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AE_ALL_EVENTS	.\event.h	18;"	d
AE_BUF_SIZE	.\event.h	6;"	d
AE_DONT_WAIT	.\event.h	19;"	d
AE_ERR	.\event.h	10;"	d
AE_FILE_EVENTS	.\event.h	16;"	d
AE_NONE	.\event.h	12;"	d
AE_NOTUSED	.\event.h	22;"	d
AE_OK	.\event.h	9;"	d
AE_READABLE	.\event.h	13;"	d
AE_TIME_EVENTS	.\event.h	17;"	d
AE_WAIT_TIME	.\event.h	5;"	d
AE_WRITABLE	.\event.h	14;"	d
CClient	.\handle.cpp	/^CClient::CClient(const char* name, int fd)$/;"	f	class:CClient	signature:(const char* name, int fd)
CClient	.\handle.h	/^    CClient(const CClient&);$/;"	p	class:CClient	access:public	signature:(const CClient&)
CClient	.\handle.h	/^    CClient(const char* name, int fd);    $/;"	p	class:CClient	access:public	signature:(const char* name, int fd)
CClient	.\handle.h	/^class CClient$/;"	c
CClient::CClient	.\handle.cpp	/^CClient::CClient(const char* name, int fd)$/;"	f	class:CClient	signature:(const char* name, int fd)
CClient::CClient	.\handle.h	/^    CClient(const CClient&);$/;"	p	class:CClient	access:public	signature:(const CClient&)
CClient::CClient	.\handle.h	/^    CClient(const char* name, int fd);    $/;"	p	class:CClient	access:public	signature:(const char* name, int fd)
CClient::OnConnected	.\handle.cpp	/^void CClient::OnConnected()$/;"	f	class:CClient	signature:()
CClient::OnConnected	.\handle.h	/^    void OnConnected();$/;"	p	class:CClient	access:public	signature:()
CClient::ProcessQuery	.\handle.cpp	/^int CClient::ProcessQuery()$/;"	f	class:CClient	signature:()
CClient::ProcessQuery	.\handle.h	/^    int ProcessQuery(); \/\/ recv from server$/;"	p	class:CClient	access:public	signature:()
CClient::SendToClient	.\handle.cpp	/^int CClient::SendToClient(const char* buf, int len)$/;"	f	class:CClient	signature:(const char* buf, int len)
CClient::SendToClient	.\handle.h	/^    int SendToClient(const char* buf, int len); \/\/ send to server$/;"	p	class:CClient	access:public	signature:(const char* buf, int len)
CClient::m_cfd	.\handle.h	/^    int m_cfd;$/;"	m	class:CClient	access:private
CClient::m_name	.\handle.h	/^    string m_name;$/;"	m	class:CClient	access:private
CClient::m_nread	.\handle.h	/^    int m_nread;$/;"	m	class:CClient	access:private
CClient::m_querybuf	.\handle.h	/^    char m_querybuf[AE_BUF_SIZE];$/;"	m	class:CClient	access:private
CClient::m_replybuf	.\handle.h	/^    char m_replybuf[AE_BUF_SIZE];$/;"	m	class:CClient	access:private
CClient::m_replylen	.\handle.h	/^    int m_replylen;$/;"	m	class:CClient	access:private
CClient::operator =	.\handle.h	/^    CClient& operator=(const CClient&);$/;"	p	class:CClient	access:public	signature:(const CClient&)
CClient::~CClient	.\handle.cpp	/^CClient::~CClient()$/;"	f	class:CClient	signature:()
CClient::~CClient	.\handle.h	/^    ~CClient();$/;"	p	class:CClient	access:public	signature:()
CGlobalCfg	.\global.cpp	/^CGlobalCfg::CGlobalCfg()$/;"	f	class:CGlobalCfg	signature:()
CGlobalCfg	.\global.h	/^    CGlobalCfg();$/;"	p	class:CGlobalCfg	access:private	signature:()
CGlobalCfg	.\global.h	/^    CGlobalCfg(const CGlobalCfg&);$/;"	p	class:CGlobalCfg	access:private	signature:(const CGlobalCfg&)
CGlobalCfg	.\global.h	/^class CGlobalCfg {$/;"	c
CGlobalCfg::CGlobalCfg	.\global.cpp	/^CGlobalCfg::CGlobalCfg()$/;"	f	class:CGlobalCfg	signature:()
CGlobalCfg::CGlobalCfg	.\global.h	/^    CGlobalCfg();$/;"	p	class:CGlobalCfg	access:private	signature:()
CGlobalCfg::CGlobalCfg	.\global.h	/^    CGlobalCfg(const CGlobalCfg&);$/;"	p	class:CGlobalCfg	access:private	signature:(const CGlobalCfg&)
CGlobalCfg::Instance	.\global.cpp	/^CGlobalCfg* CGlobalCfg::Instance()$/;"	f	class:CGlobalCfg	signature:()
CGlobalCfg::Instance	.\global.h	/^    static CGlobalCfg* Instance();$/;"	p	class:CGlobalCfg	access:public	signature:()
CGlobalCfg::LoadCfg	.\global.cpp	/^void CGlobalCfg::LoadCfg(const char* host, int port)$/;"	f	class:CGlobalCfg	signature:(const char* host, int port)
CGlobalCfg::LoadCfg	.\global.h	/^    void LoadCfg(const char* host, int port);$/;"	p	class:CGlobalCfg	access:public	signature:(const char* host, int port)
CGlobalCfg::m_clientMap	.\global.h	/^    ClientMap m_clientMap;$/;"	m	class:CGlobalCfg	access:public
CGlobalCfg::m_fd	.\global.h	/^    int m_fd; \/\/ listen fd$/;"	m	class:CGlobalCfg	access:public
CGlobalCfg::m_host	.\global.h	/^    string m_host;$/;"	m	class:CGlobalCfg	access:public
CGlobalCfg::m_pEventLoop	.\global.h	/^    aeEventLoop* m_pEventLoop;$/;"	m	class:CGlobalCfg	access:public
CGlobalCfg::m_pInstance	.\global.cpp	/^CGlobalCfg* CGlobalCfg::m_pInstance = NULL;$/;"	m	class:CGlobalCfg	file:
CGlobalCfg::m_pInstance	.\global.h	/^    static CGlobalCfg* m_pInstance;$/;"	m	class:CGlobalCfg	access:private
CGlobalCfg::m_port	.\global.h	/^    int m_port;$/;"	m	class:CGlobalCfg	access:public
CGlobalCfg::operator =	.\global.h	/^    CGlobalCfg& operator=(const CGlobalCfg&);$/;"	p	class:CGlobalCfg	access:private	signature:(const CGlobalCfg&)
CGlobalCfg::~CGlobalCfg	.\global.cpp	/^CGlobalCfg::~CGlobalCfg()$/;"	f	class:CGlobalCfg	signature:()
CGlobalCfg::~CGlobalCfg	.\global.h	/^    ~CGlobalCfg();$/;"	p	class:CGlobalCfg	access:private	signature:()
ClientMap	.\handle.h	/^typedef std::map<int, CClient*> ClientMap; \/\/ key:fd, val:point$/;"	t
CreateClient	.\handle.cpp	/^int CreateClient(int cfd)$/;"	f	signature:(int cfd)
CreateClient	.\handle.h	/^int CreateClient(int cfd);$/;"	p	signature:(int cfd)
CreateEventLoop	.\event.cpp	/^aeEventLoop* CreateEventLoop(int setsize)$/;"	f	signature:(int setsize)
CreateEventLoop	.\event.h	/^aeEventLoop* CreateEventLoop(int setsize);$/;"	p	signature:(int setsize)
CreateFileEvent	.\event.cpp	/^int CreateFileEvent(aeEventLoop* eventLoop, int fd, int mask, aeFileProc* proc, void* clientData)$/;"	f	signature:(aeEventLoop* eventLoop, int fd, int mask, aeFileProc* proc, void* clientData)
CreateFileEvent	.\event.h	/^int CreateFileEvent(aeEventLoop* eventLoop, int fd, int mask, aeFileProc* proc, void* clientData);$/;"	p	signature:(aeEventLoop* eventLoop, int fd, int mask, aeFileProc* proc, void* clientData)
DeleteFileEvent	.\event.cpp	/^void DeleteFileEvent(aeEventLoop* eventLoop, int fd, int mask)$/;"	f	signature:(aeEventLoop* eventLoop, int fd, int mask)
DeleteFileEvent	.\event.h	/^void DeleteFileEvent(aeEventLoop* eventLoop, int fd, int mask);$/;"	p	signature:(aeEventLoop* eventLoop, int fd, int mask)
DestroyClient	.\handle.cpp	/^void DestroyClient(int fd)$/;"	f	signature:(int fd)
DestroyClient	.\handle.h	/^void DestroyClient(int fd);$/;"	p	signature:(int fd)
HandleAccept	.\handle.cpp	/^int HandleAccept(aeEventLoop* eventLoop, int fd, void* clientData, int mask)$/;"	f	signature:(aeEventLoop* eventLoop, int fd, void* clientData, int mask)
HandleAccept	.\handle.h	/^int HandleAccept(aeEventLoop* eventLoop, int fd, void* clientData, int mask);$/;"	p	signature:(aeEventLoop* eventLoop, int fd, void* clientData, int mask)
HandleQuery	.\handle.cpp	/^int HandleQuery(aeEventLoop* eventLoop, int fd, void* clientData, int mask)$/;"	f	signature:(aeEventLoop* eventLoop, int fd, void* clientData, int mask)
HandleQuery	.\handle.h	/^int HandleQuery(aeEventLoop* eventLoop, int fd, void* clientData, int mask);$/;"	p	signature:(aeEventLoop* eventLoop, int fd, void* clientData, int mask)
InitServer	.\handle.cpp	/^int InitServer(int port)$/;"	f	signature:(int port)
InitServer	.\handle.h	/^int InitServer(int port);$/;"	p	signature:(int port)
Instance	.\global.cpp	/^CGlobalCfg* CGlobalCfg::Instance()$/;"	f	class:CGlobalCfg	signature:()
Instance	.\global.h	/^    static CGlobalCfg* Instance();$/;"	p	class:CGlobalCfg	access:public	signature:()
LoadCfg	.\global.cpp	/^void CGlobalCfg::LoadCfg(const char* host, int port)$/;"	f	class:CGlobalCfg	signature:(const char* host, int port)
LoadCfg	.\global.h	/^    void LoadCfg(const char* host, int port);$/;"	p	class:CGlobalCfg	access:public	signature:(const char* host, int port)
MAX_EVENT_NUM	.\event.h	7;"	d
MainLoop	.\event.cpp	/^void MainLoop(aeEventLoop* eventLoop)$/;"	f	signature:(aeEventLoop* eventLoop)
MainLoop	.\event.h	/^void MainLoop(aeEventLoop* eventLoop);$/;"	p	signature:(aeEventLoop* eventLoop)
OnConnected	.\handle.cpp	/^void CClient::OnConnected()$/;"	f	class:CClient	signature:()
OnConnected	.\handle.h	/^    void OnConnected();$/;"	p	class:CClient	access:public	signature:()
ProcessEvent	.\event.cpp	/^int ProcessEvent(aeEventLoop* eventLoop)$/;"	f	signature:(aeEventLoop* eventLoop)
ProcessEvent	.\event.h	/^int ProcessEvent(aeEventLoop* eventLoop);$/;"	p	signature:(aeEventLoop* eventLoop)
ProcessFileEvent	.\event.cpp	/^int ProcessFileEvent(aeEventLoop* eventLoop)$/;"	f	signature:(aeEventLoop* eventLoop)
ProcessFileEvent	.\event.cpp	/^static int ProcessFileEvent(aeEventLoop* eventLoop);$/;"	p	file:	signature:(aeEventLoop* eventLoop)
ProcessQuery	.\handle.cpp	/^int CClient::ProcessQuery()$/;"	f	class:CClient	signature:()
ProcessQuery	.\handle.h	/^    int ProcessQuery(); \/\/ recv from server$/;"	p	class:CClient	access:public	signature:()
ProcessTimeEvent	.\event.cpp	/^int ProcessTimeEvent(aeEventLoop* eventLoop)$/;"	f	signature:(aeEventLoop* eventLoop)
ProcessTimeEvent	.\event.cpp	/^static int ProcessTimeEvent(aeEventLoop* eventLoop);$/;"	p	file:	signature:(aeEventLoop* eventLoop)
SendToClient	.\handle.cpp	/^int CClient::SendToClient(const char* buf, int len)$/;"	f	class:CClient	signature:(const char* buf, int len)
SendToClient	.\handle.h	/^    int SendToClient(const char* buf, int len); \/\/ send to server$/;"	p	class:CClient	access:public	signature:(const char* buf, int len)
TEST_DEBUG	.\global.cpp	5;"	d	file:
TEST_DENUG	.\event.cpp	8;"	d	file:
__EVENT_H__	.\event.h	2;"	d
__GLOBAL_H__	.\global.h	2;"	d
__HANDLE_H__	.\handle.h	2;"	d
acted	.\event.h	/^    aeActedEvent *acted;$/;"	m	struct:aeEventLoop	access:public
aeActedEvent	.\event.h	/^typedef struct aeActedEvent {$/;"	s
aeActedEvent	.\event.h	/^} aeActedEvent;$/;"	t	typeref:struct:aeActedEvent
aeActedEvent::fd	.\event.h	/^    int fd;$/;"	m	struct:aeActedEvent	access:public
aeActedEvent::mask	.\event.h	/^    int mask;$/;"	m	struct:aeActedEvent	access:public
aeApiAddEvent	.\ae_epoll.cpp	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, int fd, int mask)
aeApiCreate	.\ae_epoll.cpp	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:	signature:(aeEventLoop *eventLoop)
aeApiDelEvent	.\ae_epoll.cpp	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int delmask) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, int fd, int delmask)
aeApiFree	.\ae_epoll.cpp	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:	signature:(aeEventLoop *eventLoop)
aeApiName	.\ae_epoll.cpp	/^static char *aeApiName(void) {$/;"	f	file:	signature:(void)
aeApiPoll	.\ae_epoll.cpp	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, struct timeval *tvp)
aeApiResize	.\ae_epoll.cpp	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, int setsize)
aeApiState	.\ae_epoll.cpp	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	.\ae_epoll.cpp	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeApiState::epfd	.\ae_epoll.cpp	/^    int epfd;$/;"	m	struct:aeApiState	file:	access:public
aeApiState::events	.\ae_epoll.cpp	/^    struct epoll_event *events;$/;"	m	struct:aeApiState	typeref:struct:aeApiState::epoll_event	file:	access:public
aeEventLoop	.\event.h	/^typedef struct aeEventLoop {$/;"	s
aeEventLoop	.\event.h	/^} aeEventLoop;$/;"	t	typeref:struct:aeEventLoop
aeEventLoop::acted	.\event.h	/^    aeActedEvent *acted;$/;"	m	struct:aeEventLoop	access:public
aeEventLoop::apidata	.\event.h	/^    void *apidata; \/* This is used for polling API specific data *\/$/;"	m	struct:aeEventLoop	access:public
aeEventLoop::events	.\event.h	/^    aeFileEvent *events; \/* Registered events *\/$/;"	m	struct:aeEventLoop	access:public
aeEventLoop::maxfd	.\event.h	/^    int maxfd;   \/* highest file descriptor currently registered *\/$/;"	m	struct:aeEventLoop	access:public
aeEventLoop::setsize	.\event.h	/^    int setsize; \/* max number of file descriptors tracked *\/$/;"	m	struct:aeEventLoop	access:public
aeFileEvent	.\event.h	/^typedef struct aeFileEvent {$/;"	s
aeFileEvent	.\event.h	/^} aeFileEvent;$/;"	t	typeref:struct:aeFileEvent
aeFileEvent::clientData	.\event.h	/^    void *clientData;$/;"	m	struct:aeFileEvent	access:public
aeFileEvent::mask	.\event.h	/^    int mask; \/* one of AE_(READABLE|WRITABLE) *\/$/;"	m	struct:aeFileEvent	access:public
aeFileEvent::rfileProc	.\event.h	/^    aeFileProc *rfileProc;$/;"	m	struct:aeFileEvent	access:public
aeFileEvent::wfileProc	.\event.h	/^    aeFileProc *wfileProc;$/;"	m	struct:aeFileEvent	access:public
aeFileProc	.\event.h	/^typedef int aeFileProc(struct aeEventLoop *eventLoop, int fd, void *clientData, int mask);$/;"	t
apidata	.\event.h	/^    void *apidata; \/* This is used for polling API specific data *\/$/;"	m	struct:aeEventLoop	access:public
clientData	.\event.h	/^    void *clientData;$/;"	m	struct:aeFileEvent	access:public
epfd	.\ae_epoll.cpp	/^    int epfd;$/;"	m	struct:aeApiState	file:	access:public
events	.\ae_epoll.cpp	/^    struct epoll_event *events;$/;"	m	struct:aeApiState	typeref:struct:aeApiState::epoll_event	file:	access:public
events	.\event.h	/^    aeFileEvent *events; \/* Registered events *\/$/;"	m	struct:aeEventLoop	access:public
fd	.\event.h	/^    int fd;$/;"	m	struct:aeActedEvent	access:public
m_cfd	.\handle.h	/^    int m_cfd;$/;"	m	class:CClient	access:private
m_clientMap	.\global.h	/^    ClientMap m_clientMap;$/;"	m	class:CGlobalCfg	access:public
m_fd	.\global.h	/^    int m_fd; \/\/ listen fd$/;"	m	class:CGlobalCfg	access:public
m_host	.\global.h	/^    string m_host;$/;"	m	class:CGlobalCfg	access:public
m_name	.\handle.h	/^    string m_name;$/;"	m	class:CClient	access:private
m_nread	.\handle.h	/^    int m_nread;$/;"	m	class:CClient	access:private
m_pEventLoop	.\global.h	/^    aeEventLoop* m_pEventLoop;$/;"	m	class:CGlobalCfg	access:public
m_pInstance	.\global.cpp	/^CGlobalCfg* CGlobalCfg::m_pInstance = NULL;$/;"	m	class:CGlobalCfg	file:
m_pInstance	.\global.h	/^    static CGlobalCfg* m_pInstance;$/;"	m	class:CGlobalCfg	access:private
m_port	.\global.h	/^    int m_port;$/;"	m	class:CGlobalCfg	access:public
m_querybuf	.\handle.h	/^    char m_querybuf[AE_BUF_SIZE];$/;"	m	class:CClient	access:private
m_replybuf	.\handle.h	/^    char m_replybuf[AE_BUF_SIZE];$/;"	m	class:CClient	access:private
m_replylen	.\handle.h	/^    int m_replylen;$/;"	m	class:CClient	access:private
main	.\event.cpp	/^int main(void)$/;"	f	signature:(void)
main	.\global.cpp	/^int main(void)$/;"	f	signature:(void)
main	.\server.cpp	/^int main(void)$/;"	f	signature:(void)
mask	.\event.h	/^    int mask; \/* one of AE_(READABLE|WRITABLE) *\/$/;"	m	struct:aeFileEvent	access:public
mask	.\event.h	/^    int mask;$/;"	m	struct:aeActedEvent	access:public
maxfd	.\event.h	/^    int maxfd;   \/* highest file descriptor currently registered *\/$/;"	m	struct:aeEventLoop	access:public
operator =	.\global.h	/^    CGlobalCfg& operator=(const CGlobalCfg&);$/;"	p	class:CGlobalCfg	access:private	signature:(const CGlobalCfg&)
operator =	.\handle.h	/^    CClient& operator=(const CClient&);$/;"	p	class:CClient	access:public	signature:(const CClient&)
rfileProc	.\event.h	/^    aeFileProc *rfileProc;$/;"	m	struct:aeFileEvent	access:public
setsize	.\event.h	/^    int setsize; \/* max number of file descriptors tracked *\/$/;"	m	struct:aeEventLoop	access:public
wfileProc	.\event.h	/^    aeFileProc *wfileProc;$/;"	m	struct:aeFileEvent	access:public
zfree	.\ae_epoll.cpp	35;"	d	file:
zmalloc	.\ae_epoll.cpp	33;"	d	file:
zrealloc	.\ae_epoll.cpp	34;"	d	file:
~CClient	.\handle.cpp	/^CClient::~CClient()$/;"	f	class:CClient	signature:()
~CClient	.\handle.h	/^    ~CClient();$/;"	p	class:CClient	access:public	signature:()
~CGlobalCfg	.\global.cpp	/^CGlobalCfg::~CGlobalCfg()$/;"	f	class:CGlobalCfg	signature:()
~CGlobalCfg	.\global.h	/^    ~CGlobalCfg();$/;"	p	class:CGlobalCfg	access:private	signature:()
